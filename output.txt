Sun Jun  8 06:23:04 PM PDT 2025
Linux csslab6.uwb.edu 5.14.0-503.35.1.el9_5.x86_64 #1 SMP PREEMPT_DYNAMIC Thu Apr 3 12:12:16 UTC 2025 x86_64 x86_64 x86_64 GNU/Linux
uid=1325499(aguijos) gid=2121325499(aguijos) groups=2121325499(aguijos),605559(lab-access) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
=====================================================
1. If the section below is empty, the program compiles 
   without warnings with -Wall -Wextra flags
=====================================================
history.cpp: In member function ‘virtual void History::execute(Inventory&, CustomerTable&)’:
history.cpp:7:35: warning: unused parameter ‘inv’ [-Wunused-parameter]
    7 | void History::execute(Inventory & inv, CustomerTable &manager) {
      |                       ~~~~~~~~~~~~^~~
return.cpp: In constructor ‘Return::Return(int, char, char, const string&)’:
return.cpp:7:37: warning: unused parameter ‘mediaType’ [-Wunused-parameter]
    7 | Return::Return(int customerId, char mediaType, char movieType,
      |                                ~~~~~^~~~~~~~~
=====================================================
2. If the section below is empty or has the expected output 
    the program puns and produces correct output
=====================================================
Discarding invalid movie entry: Z, 10, Hal Ashby, Harold and Maude, Bud Cort 3 1971
Discarding invalid movie entry: Z, 10, Frank Capra, It's a Wonderful Life, James Steward 11 1946
Discarding invalid movie entry: 
Discarding invalid movie entry: 
Discarding invalid movie entry: 
Discarding invalid movie entry: 
Discarding invalid movie entry: 
C, 10, John Huston, The Maltese Falcon, Humphrey Bogart 10 1941
C, 10, Frank Capra, It's a Wonderful Life, Donna Reed 11 1946
C, 10, Frank Capra, It's a Wonderful Life, James Steward 11 1946
C, 10, Victor Fleming, Gone With the Wind, Clark Gable 2 1939
C, 10, Victor Fleming, Gone With the Wind, Vivien Leigh 2 1939
C, 10, Stanley Kubrick, A Clockwork Orange, Malcolm McDowell 2 1971
C, 10, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
C, 10, George Cukor, The Philadelphia Story, Cary Grant 5 1940
C, 10, George Cukor, The Philadelphia Story, Katherine Hepburn 5 1940
C, 10, Victor Fleming, The Wizard of Oz, Judy Garland 7 1939
C, 10, Michael Curtiz, Casablanca, Humphrey Bogart 8 1942
C, 10, Michael Curtiz, Casablanca, Ingrid Bergman 8 1942
C, 10, George Cukor, Holiday, Cary Grant 9 1938
C, 10, George Cukor, Holiday, Katherine Hepburn 9 1938
F, 10, Woody Allen, Annie Hall, 1977
D, 10, Barry Levinson, Good Morning Vietnam, 1988
D, 10, Barry Levinson, Same Director Good Morning Vietnam, 1988
D, 10, Clint Eastwood, Unforgiven, 1992
F, 10, Joel Coen, Fargo, 1996
D, 10, Gus Van Sant, Good Will Hunting, 2000
D, 10, Jonathan Demme, Silence of the Lambs, 1991
D, 10, Nancy Savoca, Dogfight, 1991
F, 10, John Landis, National Lampoon's Animal House, 1978
D, 10, Phillippe De Broca, King of Hearts, 1967
F, 10, Different Years, Pirates of the Caribbean, 2000
F, 10, Gore Verbinski, Pirates of the Caribbean, 2003
F, 10, Nora Ephron, Sleepless in Seattle, 1993
D, 10, Steven Spielberg, Schindler's List, 1993
F, 10, Rob Reiner, When Harry Met Sally, 1989
F, 10, Nora Ephron, You've Got Mail, 1998
Transaction history for customer 1000:
History for: Minnie Mouse
Transaction history for customer 5000:
History for: Freddie Frog
Transaction history for customer 8000:
History for: Wally Wacky
Discarding invalid command: X
Discarding invalid command: Z 1000 D C 10 1941 Humphrey Bogart
ERROR: Customer ID 1234 not found.
ERROR: Movie not found: Bogus Title, 2001
ERROR: Movie out of stock: 3 1971 Ruth Gordon
ERROR: Movie out of stock: 3 1971 Ruth Gordon
ERROR: Movie out of stock: 3 1971 Ruth Gordon
ERROR: Movie not found: Steven Spielberg, Bogus Title
C, 9, John Huston, The Maltese Falcon, Humphrey Bogart 10 1941
C, 10, Frank Capra, It's a Wonderful Life, Donna Reed 11 1946
C, 10, Frank Capra, It's a Wonderful Life, James Steward 11 1946
C, 10, Victor Fleming, Gone With the Wind, Clark Gable 2 1939
C, 10, Victor Fleming, Gone With the Wind, Vivien Leigh 2 1939
C, 8, Stanley Kubrick, A Clockwork Orange, Malcolm McDowell 2 1971
C, 0, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
C, 9, George Cukor, The Philadelphia Story, Cary Grant 5 1940
C, 9, George Cukor, The Philadelphia Story, Katherine Hepburn 5 1940
C, 10, Victor Fleming, The Wizard of Oz, Judy Garland 7 1939
C, 10, Michael Curtiz, Casablanca, Humphrey Bogart 8 1942
C, 10, Michael Curtiz, Casablanca, Ingrid Bergman 8 1942
C, 9, George Cukor, Holiday, Cary Grant 9 1938
C, 10, George Cukor, Holiday, Katherine Hepburn 9 1938
F, 9, Woody Allen, Annie Hall, 1977
D, 9, Barry Levinson, Good Morning Vietnam, 1988
D, 10, Barry Levinson, Same Director Good Morning Vietnam, 1988
D, 9, Clint Eastwood, Unforgiven, 1992
F, 8, Joel Coen, Fargo, 1996
D, 9, Gus Van Sant, Good Will Hunting, 2000
D, 9, Jonathan Demme, Silence of the Lambs, 1991
D, 8, Nancy Savoca, Dogfight, 1991
F, 9, John Landis, National Lampoon's Animal House, 1978
D, 9, Phillippe De Broca, King of Hearts, 1967
F, 10, Different Years, Pirates of the Caribbean, 2000
F, 10, Gore Verbinski, Pirates of the Caribbean, 2003
F, 9, Nora Ephron, Sleepless in Seattle, 1993
D, 9, Steven Spielberg, Schindler's List, 1993
F, 9, Rob Reiner, When Harry Met Sally, 1989
F, 9, Nora Ephron, You've Got Mail, 1998
Transaction history for customer 1000:
History for: Minnie Mouse
 Borrowed: D, 9, Barry Levinson, Good Morning Vietnam, 1988
 Borrowed: C, 9, George Cukor, The Philadelphia Story, Katherine Hepburn 5 1940
 Borrowed: D, 9, Gus Van Sant, Good Will Hunting, 2000
 Borrowed: C, 9, George Cukor, The Philadelphia Story, Cary Grant 5 1940
 Borrowed: C, 8, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
 Borrowed: F, 8, Joel Coen, Fargo, 1996
Transaction history for customer 1111:
History for: Mickey Mouse
 Borrowed: C, 8, Stanley Kubrick, A Clockwork Orange, Malcolm McDowell 2 1971
 Borrowed: C, 7, Stanley Kubrick, A Clockwork Orange, Malcolm McDowell 2 1971
 Borrowed: C, 9, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
 Borrowed: C, 9, John Huston, The Maltese Falcon, Humphrey Bogart 10 1941
 Borrowed: C, 9, George Cukor, Holiday, Cary Grant 9 1938
Transaction history for customer 5000:
History for: Freddie Frog
 Borrowed: C, 9, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
 Returned: C, 10, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
 Borrowed: C, 9, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
 Returned: C, 10, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
 Borrowed: C, 5, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
 Returned: C, 6, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
 Borrowed: C, 5, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
Transaction history for customer 8000:
History for: Wally Wacky
 Borrowed: F, 9, Nora Ephron, You've Got Mail, 1998
 Returned: F, 10, Nora Ephron, You've Got Mail, 1998
 Borrowed: C, 7, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
 Borrowed: C, 6, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
 Borrowed: F, 9, John Landis, National Lampoon's Animal House, 1978
Transaction history for customer 8888:
History for: Porky Pig
 Borrowed: F, 9, Woody Allen, Annie Hall, 1977
 Borrowed: F, 9, Rob Reiner, When Harry Met Sally, 1989
 Borrowed: D, 9, Jonathan Demme, Silence of the Lambs, 1991
 Borrowed: D, 9, Nancy Savoca, Dogfight, 1991
 Borrowed: C, 4, Hal Ashby, Harold and Maude, Ruth Gordon 3 1971
Done!
=====================================================
3. If the section below is empty, then there are no clang-tidy warnings 
   (ignore warnings from system headers, such as "13554 warnings generated.")
=====================================================
[1/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/borrow.cpp.
18622 warnings generated.
[2/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/classic.cpp.
35655 warnings generated.
[3/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/comedy.cpp.
52688 warnings generated.
[4/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/command.cpp.
74697 warnings generated.
[5/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/customer.cpp.
91539 warnings generated.
[6/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/customerTable.cpp.
108095 warnings generated.
[7/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/drama.cpp.
125128 warnings generated.
[8/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/hashtable.cpp.
145509 warnings generated.
[9/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/history.cpp.
164125 warnings generated.
[10/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/inventorycommand.cpp.
182462 warnings generated.
[11/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/inventory.cpp.
199228 warnings generated.
[12/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/main.cpp.
218355 warnings generated.
[13/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/movie.cpp.
238770 warnings generated.
[14/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/return.cpp.
257386 warnings generated.
[15/15] Processing file /home/NETID/aguijos/343-movies-Joe4001/store_test.cpp.
275274 warnings generated.
/home/NETID/aguijos/343-movies-Joe4001/borrow.cpp:16:10: error: implicit conversion 'Customer *' -> 'bool' [readability-implicit-bool-conversion,-warnings-as-errors]
   16 |     if (!customer) {
      |         ~^       
      |                   == nullptr
/home/NETID/aguijos/343-movies-Joe4001/borrow.cpp:21:10: error: implicit conversion 'Movie *' -> 'bool' [readability-implicit-bool-conversion,-warnings-as-errors]
   21 |     if (!movie) {
      |         ~^    
      |                == nullptr
/home/NETID/aguijos/343-movies-Joe4001/borrow.cpp:41:5: error: multiple declarations in a single statement reduces readability [readability-isolate-declaration,-warnings-as-errors]
   41 |     char mediaType, movieType;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/NETID/aguijos/343-movies-Joe4001/borrow.cpp:48:84: error: statement should be inside braces [google-readability-braces-around-statements,readability-braces-around-statements,-warnings-as-errors]
   48 |     while (!movieKey.empty() && (movieKey.back() == ',' || movieKey.back() == ' '))
      |                                                                                    ^
      |                                                                                     {
   49 |     movieKey.pop_back();
      |                         
/home/NETID/aguijos/343-movies-Joe4001/borrow.cpp:51:5: error: misleading indentation: statement is indented too deeply [readability-misleading-indentation,-warnings-as-errors]
   51 |     return new Borrow(customerId, mediaType, movieType, movieKey);
      |     ^
/home/NETID/aguijos/343-movies-Joe4001/borrow.cpp:48:5: note: did you mean this line to be inside this 'while'
   48 |     while (!movieKey.empty() && (movieKey.back() == ',' || movieKey.back() == ' '))
      |     ^
/home/NETID/aguijos/343-movies-Joe4001/classic.cpp:2:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
    2 | #include <sstream>
      | ^        ~~~~~~~~~
      |          <iostream>
    3 | #include <iostream>
      |          ~~~~~~~~~~
      |          <sstream>
/home/NETID/aguijos/343-movies-Joe4001/classic.cpp:11:48: error: statement should be inside braces [google-readability-braces-around-statements,readability-braces-around-statements,-warnings-as-errors]
   11 |     if (movieData.year != other.movieData.year)
      |                                                ^
      |                                                 {
   12 |         return movieData.year < other.movieData.year;
      |                                                      
/home/NETID/aguijos/343-movies-Joe4001/classic.cpp:13:59: error: statement should be inside braces [google-readability-braces-around-statements,readability-braces-around-statements,-warnings-as-errors]
   13 |     if (month != static_cast<const Classic&>(other).month)
      |                                                           ^
      |                                                            {
   14 |         return month < static_cast<const Classic&>(other).month;
      |                                                                 
/home/NETID/aguijos/343-movies-Joe4001/classic.cpp:37:5: error: multiple declarations in a single statement reduces readability [readability-isolate-declaration,-warnings-as-errors]
   37 |     std::string director, title, actorFirst, actorLast;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/NETID/aguijos/343-movies-Joe4001/classic.cpp:38:5: error: multiple declarations in a single statement reduces readability [readability-isolate-declaration,-warnings-as-errors]
   38 |     int month, year;
      |     ^~~~~~~~~~~~~~~~
/home/NETID/aguijos/343-movies-Joe4001/classic.cpp:42:21: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   42 |     if (type != 'C') return nullptr;
      |                     ^               
      |                      {
/home/NETID/aguijos/343-movies-Joe4001/classic.cpp:43:26: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   43 |     if (ss.peek() == ',') ss.ignore();
      |                          ^            
      |                           {
/home/NETID/aguijos/343-movies-Joe4001/classic.cpp:44:29: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   44 |     while (ss.peek() == ' ') ss.ignore();
      |                             ^            
      |                              {
/home/NETID/aguijos/343-movies-Joe4001/classic.cpp:48:26: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   48 |     if (ss.peek() == ',') ss.ignore();
      |                          ^            
      |                           {
/home/NETID/aguijos/343-movies-Joe4001/classic.cpp:49:29: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   49 |     while (ss.peek() == ' ') ss.ignore();
      |                             ^            
      |                              {
/home/NETID/aguijos/343-movies-Joe4001/comedy.cpp:2:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
    2 | #include <sstream>
      | ^        ~~~~~~~~~
      |          <iostream>
    3 | #include <iostream>
      |          ~~~~~~~~~~
      |          <sstream>
/home/NETID/aguijos/343-movies-Joe4001/comedy.cpp:11:50: error: statement should be inside braces [google-readability-braces-around-statements,readability-braces-around-statements,-warnings-as-errors]
   11 |     if (movieData.title != other.movieData.title)
      |                                                  ^
      |                                                   {
   12 |         return movieData.title < other.movieData.title;
      |                                                        
/home/NETID/aguijos/343-movies-Joe4001/comedy.cpp:31:5: error: multiple declarations in a single statement reduces readability [readability-isolate-declaration,-warnings-as-errors]
   31 |     std::string director, title;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/NETID/aguijos/343-movies-Joe4001/comedy.cpp:36:21: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   36 |     if (type != 'F') return nullptr;
      |                     ^               
      |                      {
/home/NETID/aguijos/343-movies-Joe4001/comedy.cpp:37:26: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   37 |     if (ss.peek() == ',') ss.ignore();
      |                          ^            
      |                           {
/home/NETID/aguijos/343-movies-Joe4001/comedy.cpp:38:26: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   38 |     if (ss.peek() == ' ') ss.ignore();
      |                          ^            
      |                           {
/home/NETID/aguijos/343-movies-Joe4001/comedy.cpp:42:26: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   42 |     if (ss.peek() == ',') ss.ignore();
      |                          ^            
      |                           {
/home/NETID/aguijos/343-movies-Joe4001/comedy.cpp:43:26: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   43 |     if (ss.peek() == ' ') ss.ignore();
      |                          ^            
      |                           {
/home/NETID/aguijos/343-movies-Joe4001/comedy.cpp:47:49: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   47 |     if (!director.empty() && director[0] == ' ') director = director.substr(1);
      |                                                 ^                              
      |                                                  {
/home/NETID/aguijos/343-movies-Joe4001/comedy.cpp:51:43: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   51 |     if (!title.empty() && title[0] == ' ') title = title.substr(1);
      |                                           ^                        
      |                                            {
/home/NETID/aguijos/343-movies-Joe4001/command.cpp:2:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
    2 | #include <sstream>
      | ^        ~~~~~~~~~
      |          <algorithm>
    3 | #include <iostream>
    4 | #include <algorithm>
      |          ~~~~~~~~~~~
      |          <sstream>
/home/NETID/aguijos/343-movies-Joe4001/command.h:4:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
    4 | #include "inventory.h"
      | ^        ~~~~~~~~~~~~~
      |          "customerTable.h"
    5 | #include "customerTable.h"
      |          ~~~~~~~~~~~~~~~~~
      |          "inventory.h"
/home/NETID/aguijos/343-movies-Joe4001/customer.cpp:32:5: error: multiple declarations in a single statement reduces readability [readability-isolate-declaration,-warnings-as-errors]
   32 |     std::string last, first;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~
/home/NETID/aguijos/343-movies-Joe4001/drama.cpp:2:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
    2 | #include <sstream>
      | ^        ~~~~~~~~~
      |          <iostream>
    3 | #include <iostream>
      |          ~~~~~~~~~~
      |          <sstream>
/home/NETID/aguijos/343-movies-Joe4001/drama.cpp:11:56: error: statement should be inside braces [google-readability-braces-around-statements,readability-braces-around-statements,-warnings-as-errors]
   11 |     if (movieData.director != other.movieData.director)
      |                                                        ^
      |                                                         {
   12 |         return movieData.director < other.movieData.director;
      |                                                              
/home/NETID/aguijos/343-movies-Joe4001/drama.cpp:31:5: error: multiple declarations in a single statement reduces readability [readability-isolate-declaration,-warnings-as-errors]
   31 |     std::string director, title;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/NETID/aguijos/343-movies-Joe4001/drama.cpp:36:21: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   36 |     if (type != 'D') return nullptr;
      |                     ^               
      |                      {
/home/NETID/aguijos/343-movies-Joe4001/drama.cpp:37:26: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   37 |     if (ss.peek() == ',') ss.ignore();
      |                          ^            
      |                           {
/home/NETID/aguijos/343-movies-Joe4001/drama.cpp:38:26: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   38 |     if (ss.peek() == ' ') ss.ignore();
      |                          ^            
      |                           {
/home/NETID/aguijos/343-movies-Joe4001/drama.cpp:42:26: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   42 |     if (ss.peek() == ',') ss.ignore();
      |                          ^            
      |                           {
/home/NETID/aguijos/343-movies-Joe4001/drama.cpp:43:26: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   43 |     if (ss.peek() == ' ') ss.ignore();
      |                          ^            
      |                           {
/home/NETID/aguijos/343-movies-Joe4001/drama.cpp:47:49: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   47 |     if (!director.empty() && director[0] == ' ') director = director.substr(1);
      |                                                 ^                              
      |                                                  {
/home/NETID/aguijos/343-movies-Joe4001/drama.cpp:51:43: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
   51 |     if (!title.empty() && title[0] == ' ') title = title.substr(1);
      |                                           ^                        
      |                                            {
/home/NETID/aguijos/343-movies-Joe4001/inventory.h:11:12: error: function 'Inventory::searchMovie' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name,-warnings-as-errors]
   11 |     Movie* searchMovie(const std::string& title) const;
      |            ^
/home/NETID/aguijos/343-movies-Joe4001/inventory.cpp:10:19: note: the definition seen here
   10 | Movie* Inventory::searchMovie(const std::string& key) const {
      |                   ^
/home/NETID/aguijos/343-movies-Joe4001/inventory.h:11:12: note: differing parameters are named here: ('title'), in definition: ('key')
   11 |     Movie* searchMovie(const std::string& title) const;
      |            ^                              ~~~~~
      |                                           key
/home/NETID/aguijos/343-movies-Joe4001/movie.cpp:2:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
    2 | #include <sstream>
      | ^        ~~~~~~~~~
      |          <algorithm>
    3 | #include <iostream>
    4 | #include <algorithm>
      |          ~~~~~~~~~~~
      |          <sstream>
/home/NETID/aguijos/343-movies-Joe4001/movie.h:4:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
    4 | #include <string>
      | ^        ~~~~~~~~
      |          <map>
    5 | #include <map>
      |          ~~~~~
      |          <string>
Suppressed 275213 warnings (275211 in non-user code, 2 with check filters).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
41 warnings treated as errors
=====================================================
4. If the section below is empty, clang-format does not find any formatting issues
   You can fix formatting errors using "clang-format -i <filename>" on command line
=====================================================
Running clang-format on ./borrow.cpp
7,8c7,10
< Borrow::Borrow(int customerId, char mediaType, char movieType, const std::string& movieKey)
<     : customerId(customerId), mediaType(mediaType), movieType(movieType), movieKey(movieKey) {}
---
> Borrow::Borrow(int customerId, char mediaType, char movieType,
>                const std::string &movieKey)
>     : customerId(customerId), mediaType(mediaType), movieType(movieType),
>       movieKey(movieKey) {}
10,30c12,34
< void Borrow::execute(Inventory& inventory, CustomerTable& customers) {
<     // std::cout << "Executing Borrow Command for " << customers.getCustomer(customerId)
<     //           << ", Media Type: " << mediaType 
<     //           << ", Movie Type: " << movieType 
<     //           << ", Movie Key: " << movieKey << std::endl;
<     Customer* customer = customers.getCustomer(customerId);
<     if (!customer) {
<         std::cout << "ERROR: Customer ID " << customerId << " not found." << std::endl;
<         return;
<     }
<     Movie* movie = inventory.searchMovie(movieKey);
<     if (!movie) {
<         std::cout << "ERROR: Movie not found: " << movieKey << std::endl;
<         return;
<     }
<     if (movie->getStock() > 0) {
<         movie->decreaseStock();
<         customer->addTransaction("Borrowed: " + movie->print());
<     } else {
<         std::cout << "ERROR: Movie out of stock: " << movieKey << std::endl;
<     }
---
> void Borrow::execute(Inventory &inventory, CustomerTable &customers) {
>   // std::cout << "Executing Borrow Command for " <<
>   // customers.getCustomer(customerId)
>   //           << ", Media Type: " << mediaType
>   //           << ", Movie Type: " << movieType
>   //           << ", Movie Key: " << movieKey << std::endl;
>   Customer *customer = customers.getCustomer(customerId);
>   if (!customer) {
>     std::cout << "ERROR: Customer ID " << customerId << " not found."
>               << std::endl;
>     return;
>   }
>   Movie *movie = inventory.searchMovie(movieKey);
>   if (!movie) {
>     std::cout << "ERROR: Movie not found: " << movieKey << std::endl;
>     return;
>   }
>   if (movie->getStock() > 0) {
>     movie->decreaseStock();
>     customer->addTransaction("Borrowed: " + movie->print());
>   } else {
>     std::cout << "ERROR: Movie out of stock: " << movieKey << std::endl;
>   }
33,35c37
< BorrowFactory::BorrowFactory() {
<     registerType("B", this);
< }
---
> BorrowFactory::BorrowFactory() { registerType("B", this); }
37,42c39,44
< Command* BorrowFactory::makeCommand(const std::string& data) const {
<     std::istringstream ss(data);
<     std::string commandType;
<     int customerId;
<     char mediaType, movieType;
<     std::string movieKey;
---
> Command *BorrowFactory::makeCommand(const std::string &data) const {
>   std::istringstream ss(data);
>   std::string commandType;
>   int customerId;
>   char mediaType, movieType;
>   std::string movieKey;
44,48c46,51
<     ss >> commandType >> customerId >> mediaType >> movieType;
<     std::getline(ss, movieKey);
<     movieKey.erase(0, movieKey.find_first_not_of(" "));
<     //
<     while (!movieKey.empty() && (movieKey.back() == ',' || movieKey.back() == ' '))
---
>   ss >> commandType >> customerId >> mediaType >> movieType;
>   std::getline(ss, movieKey);
>   movieKey.erase(0, movieKey.find_first_not_of(" "));
>   //
>   while (!movieKey.empty() &&
>          (movieKey.back() == ',' || movieKey.back() == ' '))
51c54
<     return new Borrow(customerId, mediaType, movieType, movieKey);
---
>   return new Borrow(customerId, mediaType, movieType, movieKey);
Running clang-format on ./classic.cpp
2d1
< #include <sstream>
3a3
> #include <sstream>
5c5,6
< Classic::Classic(const MovieData& data, int month, const std::string& majorActor)
---
> Classic::Classic(const MovieData &data, int month,
>                  const std::string &majorActor)
7c8
<     movieData = data;
---
>   movieData = data;
10,15c11,16
< bool Classic::operator<(const Movie& other) const {
<     if (movieData.year != other.movieData.year)
<         return movieData.year < other.movieData.year;
<     if (month != static_cast<const Classic&>(other).month)
<         return month < static_cast<const Classic&>(other).month;
<     return majorActor < static_cast<const Classic&>(other).majorActor;
---
> bool Classic::operator<(const Movie &other) const {
>   if (movieData.year != other.movieData.year)
>     return movieData.year < other.movieData.year;
>   if (month != static_cast<const Classic &>(other).month)
>     return month < static_cast<const Classic &>(other).month;
>   return majorActor < static_cast<const Classic &>(other).majorActor;
19,22c20,24
<     std::ostringstream oss;
<     oss << "C, " << movieData.stock << ", " << movieData.director << ", "
<         << movieData.title << ", " << majorActor << " " << month << " " << movieData.year;
<     return oss.str();
---
>   std::ostringstream oss;
>   oss << "C, " << movieData.stock << ", " << movieData.director << ", "
>       << movieData.title << ", " << majorActor << " " << month << " "
>       << movieData.year;
>   return oss.str();
26c28,29
<     return std::to_string(month) + " " + std::to_string(movieData.year) + " " + majorActor;
---
>   return std::to_string(month) + " " + std::to_string(movieData.year) + " " +
>          majorActor;
29,31c32
< ClassicFactory::ClassicFactory() {
<     registerType("C", this);
< }
---
> ClassicFactory::ClassicFactory() { registerType("C", this); }
33,69c34,75
< Movie* ClassicFactory::makeMovie(const std::string& data) const {
<     std::istringstream ss(data);
<     char type;
<     int stock;
<     std::string director, title, actorFirst, actorLast;
<     int month, year;
< 
<     // Parse type
<     ss >> type;
<     if (type != 'C') return nullptr;
<     if (ss.peek() == ',') ss.ignore();
<     while (ss.peek() == ' ') ss.ignore();
< 
<     // Parse stock
<     ss >> stock;
<     if (ss.peek() == ',') ss.ignore();
<     while (ss.peek() == ' ') ss.ignore();
< 
<     // Parse director
<     std::getline(ss, director, ',');
<     director.erase(0, director.find_first_not_of(" "));
<     director.erase(director.find_last_not_of(" ") + 1);
< 
<     // Parse title
<     std::getline(ss, title, ',');
<     title.erase(0, title.find_first_not_of(" "));
<     title.erase(title.find_last_not_of(" ") + 1);
< 
<     // Parse major actor, month, year
<     ss >> actorFirst >> actorLast >> month >> year;
<     std::string majorActor = actorFirst + " " + actorLast;
< 
<     Movie::MovieData md;
<     md.stock = stock;
<     md.director = director;
<     md.title = title;
<     md.year = year;
---
> Movie *ClassicFactory::makeMovie(const std::string &data) const {
>   std::istringstream ss(data);
>   char type;
>   int stock;
>   std::string director, title, actorFirst, actorLast;
>   int month, year;
> 
>   // Parse type
>   ss >> type;
>   if (type != 'C')
>     return nullptr;
>   if (ss.peek() == ',')
>     ss.ignore();
>   while (ss.peek() == ' ')
>     ss.ignore();
> 
>   // Parse stock
>   ss >> stock;
>   if (ss.peek() == ',')
>     ss.ignore();
>   while (ss.peek() == ' ')
>     ss.ignore();
> 
>   // Parse director
>   std::getline(ss, director, ',');
>   director.erase(0, director.find_first_not_of(" "));
>   director.erase(director.find_last_not_of(" ") + 1);
> 
>   // Parse title
>   std::getline(ss, title, ',');
>   title.erase(0, title.find_first_not_of(" "));
>   title.erase(title.find_last_not_of(" ") + 1);
> 
>   // Parse major actor, month, year
>   ss >> actorFirst >> actorLast >> month >> year;
>   std::string majorActor = actorFirst + " " + actorLast;
> 
>   Movie::MovieData md;
>   md.stock = stock;
>   md.director = director;
>   md.title = title;
>   md.year = year;
71c77
<     return new Classic(md, month, majorActor);
---
>   return new Classic(md, month, majorActor);
Running clang-format on ./comedy.cpp
2d1
< #include <sstream>
3a3
> #include <sstream>
5,7c5
< Comedy::Comedy(const MovieData& data) {
<     movieData = data;
< }
---
> Comedy::Comedy(const MovieData &data) { movieData = data; }
9,13c7,11
< bool Comedy::operator<(const Movie& other) const {
<     // Sort by title, then year
<     if (movieData.title != other.movieData.title)
<         return movieData.title < other.movieData.title;
<     return movieData.year < other.movieData.year;
---
> bool Comedy::operator<(const Movie &other) const {
>   // Sort by title, then year
>   if (movieData.title != other.movieData.title)
>     return movieData.title < other.movieData.title;
>   return movieData.year < other.movieData.year;
17,20c15,18
<     std::ostringstream oss;
<     oss << "F, " << movieData.stock << ", " << movieData.director << ", "
<         << movieData.title << ", " << movieData.year;
<     return oss.str();
---
>   std::ostringstream oss;
>   oss << "F, " << movieData.stock << ", " << movieData.director << ", "
>       << movieData.title << ", " << movieData.year;
>   return oss.str();
23,25c21
< ComedyFactory::ComedyFactory() {
<     registerType("F", this);
< }
---
> ComedyFactory::ComedyFactory() { registerType("F", this); }
27,60c23,63
< Movie* ComedyFactory::makeMovie(const std::string& data) const {
<     std::istringstream ss(data);
<     char type;
<     int stock;
<     std::string director, title;
<     int year;
< 
<     // Parse type
<     ss >> type;
<     if (type != 'F') return nullptr;
<     if (ss.peek() == ',') ss.ignore();
<     if (ss.peek() == ' ') ss.ignore();
< 
<     // Parse stock
<     ss >> stock;
<     if (ss.peek() == ',') ss.ignore();
<     if (ss.peek() == ' ') ss.ignore();
< 
<     // Parse director
<     std::getline(ss, director, ',');
<     if (!director.empty() && director[0] == ' ') director = director.substr(1);
< 
<     // Parse title
<     std::getline(ss, title, ',');
<     if (!title.empty() && title[0] == ' ') title = title.substr(1);
< 
<     // Parse year
<     ss >> year;
<     Movie::MovieData md;
<     md.stock = stock;
<     md.director = director;
<     md.title = title;
<     md.year = year;
<     return new Comedy(md);
---
> Movie *ComedyFactory::makeMovie(const std::string &data) const {
>   std::istringstream ss(data);
>   char type;
>   int stock;
>   std::string director, title;
>   int year;
> 
>   // Parse type
>   ss >> type;
>   if (type != 'F')
>     return nullptr;
>   if (ss.peek() == ',')
>     ss.ignore();
>   if (ss.peek() == ' ')
>     ss.ignore();
> 
>   // Parse stock
>   ss >> stock;
>   if (ss.peek() == ',')
>     ss.ignore();
>   if (ss.peek() == ' ')
>     ss.ignore();
> 
>   // Parse director
>   std::getline(ss, director, ',');
>   if (!director.empty() && director[0] == ' ')
>     director = director.substr(1);
> 
>   // Parse title
>   std::getline(ss, title, ',');
>   if (!title.empty() && title[0] == ' ')
>     title = title.substr(1);
> 
>   // Parse year
>   ss >> year;
>   Movie::MovieData md;
>   md.stock = stock;
>   md.director = director;
>   md.title = title;
>   md.year = year;
>   return new Comedy(md);
Running clang-format on ./command.cpp
2,3d1
< #include <sstream>
< #include <iostream>
4a3,4
> #include <iostream>
> #include <sstream>
8,11c8,11
< inline std::string trim(const std::string& s) {
<     auto start = s.find_first_not_of(" \t\r\n");
<     auto end = s.find_last_not_of(" \t\r\n");
<     return (start == std::string::npos) ? "" : s.substr(start, end - start + 1);
---
> inline std::string trim(const std::string &s) {
>   auto start = s.find_first_not_of(" \t\r\n");
>   auto end = s.find_last_not_of(" \t\r\n");
>   return (start == std::string::npos) ? "" : s.substr(start, end - start + 1);
14,16c14,16
< std::map<std::string, CommandFactory*>& CommandFactory::getMap() {
<     static std::map<std::string, CommandFactory*> factories;
<     return factories;
---
> std::map<std::string, CommandFactory *> &CommandFactory::getMap() {
>   static std::map<std::string, CommandFactory *> factories;
>   return factories;
19,20c19,21
< void CommandFactory::registerType(const std::string& type, CommandFactory* factory) {
<     getMap()[type] = factory;
---
> void CommandFactory::registerType(const std::string &type,
>                                   CommandFactory *factory) {
>   getMap()[type] = factory;
23,33c24,35
< Command* CommandFactory::create(const std::string& data) {
<     std::istringstream ss(data);
<     std::string commandType;
<     ss >> commandType;
<     commandType = trim(commandType);
< 
<     if (getMap().count(commandType) == 0) {
<         //std::cout << "Do not know how to create command: " << commandType << std::endl;
<         return nullptr;
<     }
<     return getMap().at(commandType)->makeCommand(data);
---
> Command *CommandFactory::create(const std::string &data) {
>   std::istringstream ss(data);
>   std::string commandType;
>   ss >> commandType;
>   commandType = trim(commandType);
> 
>   if (getMap().count(commandType) == 0) {
>     // std::cout << "Do not know how to create command: " << commandType <<
>     // std::endl;
>     return nullptr;
>   }
>   return getMap().at(commandType)->makeCommand(data);
Running clang-format on ./customer.cpp
25,27c25
< const vector<string>& Customer::history() const {
<     return transactionHistory;
< }
---
> const vector<string> &Customer::history() const { return transactionHistory; }
29,36c27,34
< Customer* CustomerFactory::create(const std::string& line) {
<     std::istringstream ss(line);
<     int id;
<     std::string last, first;
<     if (!(ss >> id >> last >> first)) {
<         return nullptr;
<     }
<     return new Customer(id, last, first);
---
> Customer *CustomerFactory::create(const std::string &line) {
>   std::istringstream ss(line);
>   int id;
>   std::string last, first;
>   if (!(ss >> id >> last >> first)) {
>     return nullptr;
>   }
>   return new Customer(id, last, first);
Running clang-format on ./customerTable.cpp
Running clang-format on ./drama.cpp
2d1
< #include <sstream>
3a3
> #include <sstream>
5,7c5
< Drama::Drama(const MovieData& data) {
<     movieData = data;
< }
---
> Drama::Drama(const MovieData &data) { movieData = data; }
9,13c7,11
< bool Drama::operator<(const Movie& other) const {
<     // Sort by director, then title
<     if (movieData.director != other.movieData.director)
<         return movieData.director < other.movieData.director;
<     return movieData.title < other.movieData.title;
---
> bool Drama::operator<(const Movie &other) const {
>   // Sort by director, then title
>   if (movieData.director != other.movieData.director)
>     return movieData.director < other.movieData.director;
>   return movieData.title < other.movieData.title;
17,20c15,18
<     std::ostringstream oss;
<     oss << "D, " << movieData.stock << ", " << movieData.director << ", "
<         << movieData.title << ", " << movieData.year;
<     return oss.str();
---
>   std::ostringstream oss;
>   oss << "D, " << movieData.stock << ", " << movieData.director << ", "
>       << movieData.title << ", " << movieData.year;
>   return oss.str();
23,25c21
< DramaFactory::DramaFactory() {
<     registerType("D", this);
< }
---
> DramaFactory::DramaFactory() { registerType("D", this); }
27,60c23,63
< Movie* DramaFactory::makeMovie(const std::string& data) const {
<     std::istringstream ss(data);
<     char type;
<     int stock;
<     std::string director, title;
<     int year;
< 
<     // Parse type
<     ss >> type;
<     if (type != 'D') return nullptr;
<     if (ss.peek() == ',') ss.ignore();
<     if (ss.peek() == ' ') ss.ignore();
< 
<     // Parse stock
<     ss >> stock;
<     if (ss.peek() == ',') ss.ignore();
<     if (ss.peek() == ' ') ss.ignore();
< 
<     // Parse director
<     std::getline(ss, director, ',');
<     if (!director.empty() && director[0] == ' ') director = director.substr(1);
< 
<     // Parse title
<     std::getline(ss, title, ',');
<     if (!title.empty() && title[0] == ' ') title = title.substr(1);
< 
<     // Parse year
<     ss >> year;
<     Movie::MovieData md;
<     md.stock = stock;
<     md.director = director;
<     md.title = title;
<     md.year = year;
<     return new Drama(md);
---
> Movie *DramaFactory::makeMovie(const std::string &data) const {
>   std::istringstream ss(data);
>   char type;
>   int stock;
>   std::string director, title;
>   int year;
> 
>   // Parse type
>   ss >> type;
>   if (type != 'D')
>     return nullptr;
>   if (ss.peek() == ',')
>     ss.ignore();
>   if (ss.peek() == ' ')
>     ss.ignore();
> 
>   // Parse stock
>   ss >> stock;
>   if (ss.peek() == ',')
>     ss.ignore();
>   if (ss.peek() == ' ')
>     ss.ignore();
> 
>   // Parse director
>   std::getline(ss, director, ',');
>   if (!director.empty() && director[0] == ' ')
>     director = director.substr(1);
> 
>   // Parse title
>   std::getline(ss, title, ',');
>   if (!title.empty() && title[0] == ' ')
>     title = title.substr(1);
> 
>   // Parse year
>   ss >> year;
>   Movie::MovieData md;
>   md.stock = stock;
>   md.director = director;
>   md.title = title;
>   md.year = year;
>   return new Drama(md);
Running clang-format on ./hashtable.cpp
20c20
< }
---
>     }
31c31
< }
---
>     }
Running clang-format on ./history.cpp
7c7
< void History::execute(Inventory & inv, CustomerTable &manager) {
---
> void History::execute(Inventory &inv, CustomerTable &manager) {
Running clang-format on ./inventorycommand.cpp
4c4,5
< void InventoryCommand::execute(Inventory &inventory, CustomerTable & /*manager*/) {
---
> void InventoryCommand::execute(Inventory &inventory,
>                                CustomerTable & /*manager*/) {
10c11,12
< Command *InventoryCommandFactory::makeCommand(const std::string & /*data*/) const {
---
> Command *
> InventoryCommandFactory::makeCommand(const std::string & /*data*/) const {
Running clang-format on ./inventory.cpp
3a4
> void Inventory::addMovie(Movie *movie) { movies[movie->getKey()] = movie; }
5,15c6,11
< void Inventory::addMovie(Movie* movie) {
<     movies[movie->getKey()] = movie;
< }
< 
< 
< Movie* Inventory::searchMovie(const std::string& key) const {
<     auto it = movies.find(key);
<     if (it != movies.end()) {
<         return it->second;
<     }
<     return nullptr;
---
> Movie *Inventory::searchMovie(const std::string &key) const {
>   auto it = movies.find(key);
>   if (it != movies.end()) {
>     return it->second;
>   }
>   return nullptr;
19,21c15,17
<     for (const auto& movie : movies) {
<         std::cout << movie.second->print() << std::endl;
<     }
---
>   for (const auto &movie : movies) {
>     std::cout << movie.second->print() << std::endl;
>   }
25,27c21,23
<     for (auto& movie : movies) {
<         delete movie.second;
<     }
---
>   for (auto &movie : movies) {
>     delete movie.second;
>   }
Running clang-format on ./main.cpp
13,21c13,20
<     std::ifstream infile(filename);
<     std::string line;
<     while (std::getline(infile, line)) {
<         Movie *movie = MovieFactory::create(line);
<         if (movie != nullptr) {
<             inventory.addMovie(movie);
<         } else {
<             std::cout << "Discarding invalid movie entry: " << line << std::endl;
<         }
---
>   std::ifstream infile(filename);
>   std::string line;
>   while (std::getline(infile, line)) {
>     Movie *movie = MovieFactory::create(line);
>     if (movie != nullptr) {
>       inventory.addMovie(movie);
>     } else {
>       std::cout << "Discarding invalid movie entry: " << line << std::endl;
22a22
>   }
26,35c26,34
<     std::ifstream infile(filename);
<     std::string line;
<     while (std::getline(infile, line)) {
<         Customer *customer = CustomerFactory::create(line);
<         if (customer != nullptr) {
<             customers.addCustomer(*customer);
<             delete customer;
<         } else {
<             std::cout << "Discarding invalid customer entry: " << line << std::endl;
<         }
---
>   std::ifstream infile(filename);
>   std::string line;
>   while (std::getline(infile, line)) {
>     Customer *customer = CustomerFactory::create(line);
>     if (customer != nullptr) {
>       customers.addCustomer(*customer);
>       delete customer;
>     } else {
>       std::cout << "Discarding invalid customer entry: " << line << std::endl;
36a36
>   }
39,49c39,49
< void executeCommands(const std::string &filename, Inventory &inventory, CustomerTable &customers) {
<     std::ifstream infile(filename);
<     std::string line;
<     while (std::getline(infile, line)) {
<         Command *cmd = CommandFactory::create(line);
<         if (cmd != nullptr) {
<             cmd->execute(inventory, customers);
<             delete cmd;
<         } else {
<             std::cout << "Discarding invalid command: " << line << std::endl;
<         }
---
> void executeCommands(const std::string &filename, Inventory &inventory,
>                      CustomerTable &customers) {
>   std::ifstream infile(filename);
>   std::string line;
>   while (std::getline(infile, line)) {
>     Command *cmd = CommandFactory::create(line);
>     if (cmd != nullptr) {
>       cmd->execute(inventory, customers);
>       delete cmd;
>     } else {
>       std::cout << "Discarding invalid command: " << line << std::endl;
50a51
>   }
54,60c55,61
<     Inventory inventory;
<     CustomerTable customers;
<     loadInventory("data4movies.txt", inventory);
<     loadCustomers("data4customers.txt", customers);
<     executeCommands("data4commands.txt", inventory, customers);
<     std::cout << "Done!" << std::endl;
<     return 0;
---
>   Inventory inventory;
>   CustomerTable customers;
>   loadInventory("data4movies.txt", inventory);
>   loadCustomers("data4customers.txt", customers);
>   executeCommands("data4commands.txt", inventory, customers);
>   std::cout << "Done!" << std::endl;
>   return 0;
Running clang-format on ./movie.cpp
2,3d1
< #include <sstream>
< #include <iostream>
4a3,4
> #include <iostream>
> #include <sstream>
6,8c6,8
< std::map<std::string, MovieFactory*>& MovieFactory::getMap() {
<     static std::map<std::string, MovieFactory*> factories;
<     return factories;
---
> std::map<std::string, MovieFactory *> &MovieFactory::getMap() {
>   static std::map<std::string, MovieFactory *> factories;
>   return factories;
11,12c11,13
< void MovieFactory::registerType(const std::string& type, MovieFactory* factory) {
<     getMap()[type] = factory;
---
> void MovieFactory::registerType(const std::string &type,
>                                 MovieFactory *factory) {
>   getMap()[type] = factory;
15,20c16,21
< Movie* MovieFactory::create(const std::string& data) {
<     std::istringstream ss(data);
<     std::string movieType;
<     std::getline(ss, movieType, ',');
<     movieType.erase(0, movieType.find_first_not_of(" \t"));
<     movieType.erase(movieType.find_last_not_of(" \t") + 1);
---
> Movie *MovieFactory::create(const std::string &data) {
>   std::istringstream ss(data);
>   std::string movieType;
>   std::getline(ss, movieType, ',');
>   movieType.erase(0, movieType.find_first_not_of(" \t"));
>   movieType.erase(movieType.find_last_not_of(" \t") + 1);
22,27c23,29
<     if (getMap().count(movieType) == 0) {
<         //std::cout << "Do not know how to create movie: " << movieType << std::endl;
<         return nullptr;
<     }
<     //std::cout<< "Movie: " << data << " added " << std::endl;
<     return getMap().at(movieType)->makeMovie(data);
---
>   if (getMap().count(movieType) == 0) {
>     // std::cout << "Do not know how to create movie: " << movieType <<
>     // std::endl;
>     return nullptr;
>   }
>   // std::cout<< "Movie: " << data << " added " << std::endl;
>   return getMap().at(movieType)->makeMovie(data);
Running clang-format on ./return.cpp
25d24
< 
Running clang-format on ./store_test.cpp
=====================================================
5. If there are any memory leaks, it should be in the output below
=====================================================
=====================================================
6. Using valgrind to check for memory leaks
   Check for "definitely lost" in the output below
=====================================================
==1677518== Memcheck, a memory error detector
==1677518== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==1677518== Using Valgrind-3.23.0 and LibVEX; rerun with -h for copyright info
==1677518== Command: ./a.out
==1677518== Parent PID: 1677242
==1677518== 
==1677518== 
==1677518== HEAP SUMMARY:
==1677518==     in use at exit: 0 bytes in 0 blocks
==1677518==   total heap usage: 867 allocs, 867 frees, 197,759 bytes allocated
==1677518== 
==1677518== All heap blocks were freed -- no leaks are possible
==1677518== 
==1677518== For lists of detected and suppressed errors, rerun with: -s
==1677518== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Sun Jun  8 06:24:00 PM PDT 2025
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
